Lista de cosas por hacer:
	1) Avisar/pedir permiso a Cesar Rodas para usar Haanga
	2) Meter cadenas de conexión a bases de datos en configuración:
		mongodb://[username:password@]host1[:port1][,host2[:port2:],...]/db ( http://www.php.net/manual/en/mongo.construct.php )
		MySQL:....
	3) MongoDB: Crear código amistoso para hacer map/reduce de manera más elegante
	4) Helpers:
		- Existen los helpers del framework ( $this->h->nombre->funcion(p1, p2, ...) ) (En carpeta sys/helpers/ )
		- También existen helpers creados por el usuario ( $this->mh->nombre->funcion(p1, p2, ...) ) (En carpeta app/h/)
	5) Hacer helpers
	6) Profiling semiautomático: Puede integrarse de manera que el usuario establece un valor (por ejemplo $profiling = 0.15) y el 15 % de las veces se hace profiling de la operación (consumo de tiempo y memoria de la operación);
		- Esto se almacenará en algún sitio (por determinar) y luego podrá haber algún panel para verlo de manera elegante (API Google Chart? jQPlot ?)
		- En el futuro se puede hacer profiling de código también (start(id), stop(id));
		- Contar tanto tiempo por consulta como número de consultas, si se repite varias veces una consulta contarla varias veces. (Ley de Amdahl)
	7) Test Driven Development: mirar como integrarlo con PHPUnit.
	8) Gestión de errores: 
		- En el config estableces modo development o production, de esta manera:
			- En modo development si hay errores la traza sale por pantalla, en modo production sólo popularía el log. (highlight_(file|string))
	9) SQLite: Para gestión de errores y profiling.