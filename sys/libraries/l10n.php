<?php
/*************************************************************************
 Copyright 2011 Vevui Development Team

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
*************************************************************************/

class L10n extends Lib
{
	const VERSION = 1;

	function  __construct()
	{
		parent::__construct();
	}

	private function _get_locales($locale)
	{
		if (NULL === $locale) $locale = $this->l->client->langs;
		if (NULL === $locale) $locale = $this->e->l10n->default;
		if (!is_array($locale)) $locale = array($locale);
		return $locale;
	}

	private function _save_cache($cache_file_dir, $filename, $data)
	{
		if ($this->e->app->cache)
		{
			$this->disable_errors();
			if(!is_dir($cache_file_dir))
			{
				@mkdir($cache_file_dir, 0700, TRUE);
			}

			$cache_file_path = $cache_file_dir.'/'.$filename.'.php';

			$tempname = tempnam($cache_file_dir, '_'.$filename.'.php.'.microtime(TRUE));

			$content = '<?php $data = unserialize(\''.str_replace('\'', '\\\'', serialize($data))."');\n".'// Generated by Vevui '.VEVUI_VERSION.' on '.date('c');
			@file_put_contents($tempname, $content);
			@rename($tempname, $cache_file_path);
			$this->enable_errors();
		}
	}

	private function _get_cached($cache_file_dir, $filename)
	{
		$cache_file_path = $cache_file_dir.'/'.$filename.'.php';

		$this->disable_errors();
		@include($cache_file_path);
		$this->enable_errors();

		if ( (!isset($data)) || (self::VERSION !== $data['_vevui']['version']) )
		{
			unset($data);
			return NULL;
		}

		$xml_ttl = $this->e->l10n->xml_ttl;

		// Skip checking for modifications.
		if ($xml_ttl && ($data['_vevui']['timestamp']+$xml_ttl) < time())
		{
			$base_path = $this->e->l10n->cldr_path;

			foreach($data['_vevui']['requirements'] as $file => $valid)
			{
				// The file was modified.
				$mtime = @filemtime($base_path.$file);

				// File is not readable.
				if (FALSE === $mtime)
				{
					if ($valid)	// It was valid before.
					{
						unset($data);
						return NULL;
					}
				}
				else
				{
					// File is readable. Unset if it wasn't previously or updated.
					if ( (!$valid) || ($data['_vevui']['timestamp'] < $mtime) )
					{
						unset($data);
						return NULL;
					}
				}
			}

			// Unmodified, update timestamp on file to prevent checking until new TTL comes.
			$data['_vevui']['timestamp'] = time();

			// Save file atomically. If not possible, we still work but very slow!
			$this->_save_cache($cache_file_dir, $filename, $data);
		}

		return $data;
	}

	function countries($locale = NULL, $merge_with_default = TRUE, $short_names = FALSE)
	{
		$cldr_subpath = '/common/main';
		$cldr_base_path = $this->e->l10n->cldr_path;
		$cache_file_dir = $this->e->l10n->cache_path.'/countries';
		foreach($this->_get_locales($locale) as $l)
		{
			$l = str_replace('-', '_', $l);
			$filename = strtolower($l).($merge_with_default?'_def':'').($short_names?'_short':'');
			$data = $this->_get_cached($cache_file_dir, $filename);
			if (NULL !== $data)
			{
				unset($data['_vevui']);
				return $data;
			}

			// Regenerate file.
			$parts = explode('_', $l);
			$count = count($parts);

			$langs = array();
			$files = array();
			$tmp = array();
			if ($merge_with_default)
			{
				$langs[] = $this->e->l10n->default;
				$files[] = $this->e->l10n->default;
			}
			for($i=0; $i<$count; ++$i)
			{
				$tmp[] = $parts[$i];
				$lc = implode('_', $tmp);
				$langs[] = $lc;
				array_unshift($files, $lc);
			}

			// See if one of the parents exists and is returnable.
			foreach($files as $l)
			{
				$l = str_replace('-', '_', $l);
				if (is_file($cldr_base_path.$cldr_subpath.'/'.$l.'.xml'))
				{
					$tmp = strtolower($l).($merge_with_default?'_def':'').($short_names?'_short':'');
					$data = $this->_get_cached($cache_file_dir, $tmp);
					if (NULL !== $data)
					{
						unset($data['_vevui']);
						return $data;
					}
				}
			}

			$countries = array();
			$requirements = array();
			foreach($langs as $l)
			{
				$filepath = $cldr_subpath.'/'.$l.'.xml';
				$requirements[$filepath] = FALSE;

				$this->disable_errors();
				$xml = @simplexml_load_file($cldr_base_path.$filepath);
				$this->enable_errors();
				if (FALSE === $xml) continue;

				$filename = strtolower($l).($merge_with_default?'_def':'').($short_names?'_short':'');

				$tmp = $xml->localeDisplayNames;
				if (NULL === $tmp) continue;

				$tmp = $tmp->territories;
				if (NULL === $tmp) continue;

				$requirements[$filepath] = TRUE;

				foreach($tmp->children() as $territory)
				{
					$type = (string) $territory['type'];
					if (ctype_upper($type))
					{
						if ( (!array_key_exists($type, $countries)) || (NULL===$territory['alt']) || ($short_names && ('short'==(string)$territory['alt'])) )
						{
							$countries[$type] = (string) $territory;
						}
					}
				}
			}
			asort($countries);

			if (!$countries) continue;

			$data = $countries;
			$data['_vevui'] = array();
			$data['_vevui']['version'] = self::VERSION;
			$data['_vevui']['timestamp'] = time();
			$data['_vevui']['requirements'] = $requirements;

			// Save file atomically. If not possible, we still work but very slow!
			$this->_save_cache($cache_file_dir, $filename, $data);

			return $countries;
		}

		return NULL;
	}

	function languages($locale = NULL, $merge_with_default = TRUE)
	{
		$cldr_subpath = '/common/main';
		$cldr_base_path = $this->e->l10n->cldr_path;
		$cache_file_dir = $this->e->l10n->cache_path.'/languages';
		foreach($this->_get_locales($locale) as $l)
		{
			$l = str_replace('-', '_', $l);
			$filename = strtolower($l).($merge_with_default?'_def':'');
			$data = $this->_get_cached($cache_file_dir, $filename);
			if (NULL !== $data)
			{
				unset($data['_vevui']);
				return $data;
			}

			// Regenerate file.
			$parts = explode('_', $l);
			$count = count($parts);

			$langs = array();
			$files = array();
			$tmp = array();
			if ($merge_with_default)
			{
				$langs[] = $this->e->l10n->default;
				$files[] = $this->e->l10n->default;
			}
			for($i=0; $i<$count; ++$i)
			{
				$tmp[] = $parts[$i];
				$lc = implode('_', $tmp);
				$langs[] = $lc;
				array_unshift($files, $lc);
			}

			// See if one of the parents exists and is returnable.
			foreach($files as $l)
			{
				$l = str_replace('-', '_', $l);
				if (is_file($cldr_base_path.$cldr_subpath.'/'.$l.'.xml'))
				{
					$tmp = strtolower($l).($merge_with_default?'_def':'');
					$data = $this->_get_cached($cache_file_dir, $tmp);
					if (NULL !== $data)
					{
						unset($data['_vevui']);
						return $data;
					}
				}
			}

			$languages = array();
			$requirements = array();
			foreach($langs as $l)
			{
				$filepath = $cldr_subpath.'/'.$l.'.xml';
				$requirements[$filepath] = FALSE;

				$this->disable_errors();
				$xml = @simplexml_load_file($cldr_base_path.$filepath);
				$this->enable_errors();
				if (FALSE === $xml) continue;

				$filename = strtolower($l).($merge_with_default?'_def':'');

				$tmp = $xml->localeDisplayNames;
				if (NULL === $tmp) continue;

				$tmp = $tmp->languages;
				if (NULL === $tmp) continue;

				$requirements[$filepath] = TRUE;

				foreach($tmp->children() as $lang)
				{
					$type = (string) $lang['type'];
					$languages[$type] = (string) $lang;
				}
			}
			asort($languages);

			if (!$languages) continue;

			$data = $languages;
			$data['_vevui'] = array();
			$data['_vevui']['version'] = self::VERSION;
			$data['_vevui']['timestamp'] = time();
			$data['_vevui']['requirements'] = $requirements;

			// Save file atomically. If not possible, we still work but very slow!
			$this->_save_cache($cache_file_dir, $filename, $data);

			return $languages;
		}

		return NULL;
	}

	function phone_prefixes()
	{
		$cldr_base_path = $this->e->l10n->cldr_path;
		$filepath = '/common/supplemental/telephoneCodeData.xml';

		$cache_file_dir = $this->e->l10n->cache_path;

		$filename = 'phone_prefixes';
		$data = $this->_get_cached($cache_file_dir, $filename);
		if (NULL !== $data)
		{
			unset($data['_vevui']);
			return $data;
		}

		$this->disable_errors();
		$xml = @simplexml_load_file($cldr_base_path.$filepath);
		$this->enable_errors();
		if (FALSE === $xml) continue;

		$tmp = $xml->telephoneCodeData;
		if (NULL === $tmp) continue;

		$prefixes = array();
		foreach($tmp->children() as $territory)
		{
			$code = (string) $territory['territory'];
			if (ctype_upper($code))
			{
				$tmp2 = $territory->telephoneCountryCode;
				if (NULL === $tmp2) continue;

				$count = 0;
				$prefix = array();
				foreach($tmp2 as $p)
				{
					$prefix[] = (string) $p['code'];
					++$count;
				}
				$prefixes[$code] = 1===$count?$prefix[0]:$prefix;
			}
		}
		ksort($prefixes);

		$data = $prefixes;
		$data['_vevui'] = array();
		$data['_vevui']['version'] = self::VERSION;
		$data['_vevui']['timestamp'] = time();
		$data['_vevui']['requirements'] = array($filepath => TRUE);

		// Save file atomically. If not possible, we still work but very slow!
		$this->_save_cache($cache_file_dir, $filename, $data);

		return $prefixes;
	}

	function postal_codes()
	{
		$cldr_base_path = $this->e->l10n->cldr_path;
		$filepath = '/common/supplemental/postalCodeData.xml';

		$cache_file_dir = $this->e->l10n->cache_path;

		$filename = 'postal_codes';
		$data = $this->_get_cached($cache_file_dir, $filename);
		if (NULL !== $data)
		{
			unset($data['_vevui']);
			return $data;
		}

		$this->disable_errors();
		$xml = @simplexml_load_file($cldr_base_path.$filepath);
		$this->enable_errors();
		if (FALSE === $xml) continue;

		$tmp = $xml->postalCodeData;
		if (NULL === $tmp) continue;

		$postal_codes = array();
		foreach($tmp->children() as $territory)
		{
			$code = (string) $territory['territoryId'];
			if (ctype_upper($code))
			{
				$postal_codes[$code] = (string) $territory;
			}
		}
		ksort($postal_codes);

		$data = $postal_codes;
		$data['_vevui'] = array();
		$data['_vevui']['version'] = self::VERSION;
		$data['_vevui']['timestamp'] = time();
		$data['_vevui']['requirements'] = array($filepath => TRUE);

		// Save file atomically. If not possible, we still work but very slow!
		$this->_save_cache($cache_file_dir, $filename, $data);

		return $postal_codes;
	}
}

/* End of file sys/libraries/l10n.php */
